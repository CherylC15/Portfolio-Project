/*
Cleaning Data in SQL Queries
*/


Select *
From NashvilleHousing
limit 10;
select count(UniqueID)
from NashvilleHousing;
--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format

SELECT SaleDate,
       cast(SaleDate as date) AS converted_date
FROM `NashvilleHousing`;

UPDATE NashvilleHousing
SET SaleDate = STR_TO_DATE(SaleDate, '%m/%d/%Y');

Update `NashvilleHousing`
SET SaleDate = cast(SaleDate as date)

select SaleDate
from NashvilleHousing;
-- SaleDate is still text

-- Standardize Date Format Method 2

ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

Update NashvilleHousing
SET SaleDateConverted = CONVERT(SaleDate, date);

select SaleDateConverted
from NashvilleHousing;

 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select *
From NashvilleHousing
Where PropertyAddress is null
order by ParcelID


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, IFNULL(a.PropertyAddress,b.PropertyAddress)
From NashvilleHousing a
JOIN NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
Where a.PropertyAddress is null

UPDATE NashvilleHousing a
JOIN NashvilleHousing b
    ON a.ParcelID = b.ParcelID
    AND a.UniqueID <> b.UniqueID
SET a.PropertyAddress = IFNULL(a.PropertyAddress, b.PropertyAddress)
WHERE a.PropertyAddress IS NULL;

select PropertyAddress
from NashvilleHousing
where PropertyAddress is null;

--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)

Select PropertyAddress
      From NashvilleHousing


SELECT
SUBSTRING_INDEX(PropertyAddress, ',', 1) as address,
trim(SUBSTRING_INDEX(PropertyAddress, ',', -1)) as city
From NashvilleHousing;


ALTER TABLE NashvilleHousing
Add PropertySplitAddress Nvarchar(255);

Update NashvilleHousing
SET PropertySplitAddress = TRIM(SUBSTRING_INDEX(PropertyAddress, ',', 1))


ALTER TABLE NashvilleHousing
Add PropertySplitCity Nvarchar(255);

Update NashvilleHousing
SET PropertySplitCity = trim(SUBSTRING_INDEX(PropertyAddress, ',', -1))

Select *
From NashvilleHousing
limit 10

-- Cleaning OwnerAddress

Select OwnerAddress
From NashvilleHousing

select count(UniqueID)
from NashvilleHousing
where OwnerAddress like concat('%',PropertySplitAddress, '%');

Select
trim(substring_index(OwnerAddress, ',', 1)) as OwnerSplitAddress,
trim(substring_index(substring_index(OwnerAddress,',',2), ',', -1)) as OwnerSplitCity,
trim(substring_index(OwnerAddress, ',',-1)) as OwnerSplitState
From NashvilleHousing


ALTER TABLE NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitAddress = trim(substring_index(OwnerAddress, ',', 1))


ALTER TABLE NashvilleHousing
Add OwnerSplitCity Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitCity = trim(substring_index(substring_index(OwnerAddress,',',2), ',', -1))


ALTER TABLE NashvilleHousing
Add OwnerSplitState Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitState = trim(substring_index(OwnerAddress, ',',-1))


Select *
From NashvilleHousing;


--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From NashvilleHousing
Group by SoldAsVacant
order by 2


Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From NashvilleHousing


Update NashvilleHousing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END;


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates

WITH RowNumCTE AS (
    SELECT *,
        ROW_NUMBER() OVER (
            PARTITION BY ParcelID,
                         PropertyAddress,
                         SalePrice,
                         SaleDate,
                         LegalReference
            ORDER BY UniqueID
        ) AS row_num
    FROM NashvilleHousing
)
    select *
from RowNumCTE
where row_num >1

DELETE N
FROM NashvilleHousing AS N
JOIN RowNumCTE AS R ON N.UniqueID = R.UniqueID
WHERE R.row_num > 1;


Select *
From NashvilleHousing




---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns


Select *
From NashvilleHousing
order by ParcelID


ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress,
DROP COLUMN PropertyAddress,
DROP COLUMN SaleDate;

ALTER TABLE NashvilleHousing
DROP column TaxDistrict;
